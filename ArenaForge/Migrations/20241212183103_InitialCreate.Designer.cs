// <auto-generated />
using System;
using ArenaForge.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ArenaForge.Migrations
{
    [DbContext(typeof(ArenaDbContext))]
    [Migration("20241212183103_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArenaForge.Models.AvailableOpponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OpponentId")
                        .HasColumnType("integer");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RefillTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OpponentId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("SeasonId");

                    b.ToTable("AvailableOpponents");
                });

            modelBuilder.Entity("ArenaForge.Models.Battle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BattleTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsVictory")
                        .HasColumnType("boolean");

                    b.Property<int>("OpponentId")
                        .HasColumnType("integer");

                    b.Property<int>("OpponentScoreChange")
                        .HasColumnType("integer");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<int>("ParticipantScoreChange")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OpponentId");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Battles");
                });

            modelBuilder.Entity("ArenaForge.Models.LeaderboardEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ParticipantId")
                        .HasColumnType("integer");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer");

                    b.Property<int>("TotalScore")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("SeasonId");

                    b.ToTable("LeaderboardEntries");
                });

            modelBuilder.Entity("ArenaForge.Models.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("ArenaForge.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TicketRefillInterval")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("ArenaForge.Models.AvailableOpponent", b =>
                {
                    b.HasOne("ArenaForge.Models.Participant", "Opponent")
                        .WithMany()
                        .HasForeignKey("OpponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ArenaForge.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArenaForge.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opponent");

                    b.Navigation("Participant");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("ArenaForge.Models.Battle", b =>
                {
                    b.HasOne("ArenaForge.Models.Participant", "Opponent")
                        .WithMany()
                        .HasForeignKey("OpponentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ArenaForge.Models.Participant", "Participant")
                        .WithMany("Battles")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArenaForge.Models.Season", "Season")
                        .WithMany("Battles")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opponent");

                    b.Navigation("Participant");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("ArenaForge.Models.LeaderboardEntry", b =>
                {
                    b.HasOne("ArenaForge.Models.Participant", "Participant")
                        .WithMany("LeaderboardEntries")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArenaForge.Models.Season", "Season")
                        .WithMany("LeaderboardEntries")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("ArenaForge.Models.Participant", b =>
                {
                    b.Navigation("Battles");

                    b.Navigation("LeaderboardEntries");
                });

            modelBuilder.Entity("ArenaForge.Models.Season", b =>
                {
                    b.Navigation("Battles");

                    b.Navigation("LeaderboardEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
